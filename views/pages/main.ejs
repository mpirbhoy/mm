<% include ../partials/head %>

<body>

<% include ../partials/nav_logged_in %>

<!-- Left side of the Page -->
<div class="container-fluid">
    <div class="row">
        <!-- Search class menu & classes -->
        <div class="col-sm-3 col-md-3 sidebar">
            <button><a href="http://summer.coursegod.org">Look up 16 Summer Course Schedule Here</a></button>
            <div class="input-group input-group-md">
                <!-- Search Functionality with Select 2 Plugin -->
                <span class="input-group-addon"><i class="glyphicon glyphicon-search"></i></span>
                <select class="select2 form-control" style="width: 100%"></select>
            </div>

            <!-- List of Classes -->
            <div class="list-group" style="margin-top: 20px">
                <form id="courses">
                </form>
            </div>
        </div>

        <!-- RIGHT SIDE OF THE PAGE -->
        <div class="col-sm-9 col-sm-offset-3 col-md-9 col-md-offset-3 main">
            <div class="col-lg-6">
                <div class="fall">
                    <div id='calendar'></div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="winter">
                    <div id='calendar2'></div>
                </div>
            </div>

        </div>
    </div>
</div>



<script>
    $(document).ready(function() {
            //Google Analytics script
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

            ga('create', 'UA-72169327-1', 'auto');
            ga('send', 'pageview');


        // Initiate localStorage
        if (typeof(Storage) !== "undefined") {
            // Retrieve
        } else {
            alert("Your browser does not support Web Storage.\n (data is lost when the browser is closed.)");
        }

        // Initiate fall calender
        $('#calendar').fullCalendar(
                {defaultView: 'agendaWeek',
                    columnFormat: 'ddd',
                    weekends: false,
                    header:false,
                    allDaySlot:false,
                    minTime: '08:00:00',
                    maxTime: '22:00:00',
                    slotDuration: '00:15:00',
                    slotLabelInterval: '01:00:00',
                    slotEventOverlap: false
                });

        $('#calendar').fullCalendar('gotoDate', '2015-12-21');

        $('#calendar').fullCalendar('option', 'height', 760);


        // Initiate winter calender
        $('#calendar2').fullCalendar(
                {defaultView: 'agendaWeek',
                    columnFormat: 'ddd',
                    weekends: false,
                    header:false,
                    allDaySlot:false,
                    minTime: '08:00:00',
                    maxTime: '22:00:00',
                    slotDuration: '00:15:00',
                    slotLabelInterval: '01:00:00',
                    slotEventOverlap: false
                });

        $('#calendar2').fullCalendar('gotoDate', '2015-12-21');
        $('#calendar2').fullCalendar('option', 'height', 760);

        // Write fall/winter header to the calendar
        $('.fall .fc-axis.fc-widget-header').html("<div class='pink'>Fall</div>");
        $('.winter .fc-axis.fc-widget-header').html("<div class='blue'>Winter</div>");

        // Initiate search bar
        $(".select2").select2({
            placeholder: "Select courses",
            ajax: {
                url: "/allCourses",
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        term: params.term // search term
                    };
                },
                processResults: function (data, params) {
                    // parse the results into the format expected by Select2
                    // since we are using custom formatting functions we do not need to
                    // alter the remote JSON data
                    // http://stackoverflow.com/questions/31353259/select2-4-0-0-cant-select-results

                    return {
                        results: data
                    };
                },
                cache: true
            },
            escapeMarkup: function (markup) { return markup; }, // let the custom formatter work
            minimumInputLength: 3,
            templateResult: formatCourse,
            templateSelection: formatCourseSelection
        });


        function formatCourse (course) {
            if (course.loading) return course.text;
            var markup = "<div class='select2-result-repository clearfix'>" +
                    "<div class='select2-result-repository__title'>" + course.courseCode + " " + course.courseName + "</div></div>";
            return markup;
        }

        function formatCourseSelection (status) {
            return status.courseCode || status.text;
        }

        // Set eventListener for the searchbar
        var $eventSelect = $(".select2");
        $eventSelect.on("select2:select", function (e) { log("select2:select", e); });
        var courseCount = 1;


        // Add course to the sidebar
        function log (name, evt) {
            if (!evt) {
                var args = "{}";
            } else {
                var args = JSON.stringify(evt.params, function (key, value) {
                    if (value && value.nodeName) return "[DOM node]";
                    if (value instanceof $.Event) return "[$.Event]";
                    return value;
                });
            }
            var titleExists = false;
            var courseCode = JSON.parse(args).data['courseCode'];
            var courseName = JSON.parse(args).data['courseName'];

            $.ajax({
                type: "GET",
                url: "/course/" + courseCode + "/" + courseName,
                dataType: 'json',
                success: function(data) {
                    if (localStorage[courseCode] == null) {
                        localStorage[courseCode] = JSON.stringify([{title: courseName, data: data, selection: {}}]);
                        if (localStorage['allCourses'] == null) {
                            var temp = [courseCode];
                            localStorage['allCourses'] = JSON.stringify(temp);
                        } else {
                            var temp = JSON.parse(localStorage['allCourses']);
                            var courseExists = false;
                            for (var i = 0; i < temp.length; i++) {
                                if (temp[i] == courseCode) {
                                    courseExists = true;
                                }
                            }
                            if (!courseExists) {
                                temp.push(courseCode);
                                localStorage['allCourses'] = JSON.stringify(temp);
                            }
                        }
                    } else {
                        var temp = JSON.parse(localStorage[courseCode]);
                        for (var i = 0; i < temp.length; i++) {
                            if (temp[i].title == data.title) {
                                titleExists = true;
                            }
                        }
                        if (!titleExists) {
                            temp.push({title: courseName, data: data, selection: {}});
                            localStorage[courseCode] = JSON.stringify(temp);
                            if (localStorage[courseCode] == null) {
                                localStorage[courseCode] = JSON.stringify([{
                                    title: courseName,
                                    data: data,
                                    selection: {}
                                }]);
                                if (localStorage['allCourses'] == null) {
                                    var temp = [courseCode];
                                    localStorage['allCourses'] = JSON.stringify(temp);
                                } else {
                                    var temp = JSON.parse(localStorage['allCourses']);
                                    var courseExists = false;
                                    for (var i = 0; i < temp.length; i++) {
                                        if (temp[i] == courseCode) {
                                            courseExists = true;
                                        }
                                    }
                                    if (!courseExists) {
                                        temp.push(courseCode);
                                        localStorage['allCourses'] = JSON.stringify(temp);
                                    }
                                }
                            }
                        }


                    }

                    var sections = data.sections;
                    if (data.status != 409 && !titleExists) {
                        var msg = displayCourses(courseCode, courseName, data, sections, 'onSearch');
                        $('#courses').prepend(msg);
                        courseCount++;
                    }
                },
                fail: function() {
                }
            });
            $(".select2").val('').trigger('change');
        }

        var sourceClicked = [];
        var sourceClickedFall = [];
        var sourceClickedWinter = [];
        var sourceRemove = [];

        $('body').on('click', '.section .content', function() {

            var $courseCode = $(this).closest('.panel').find('button').attr('value');
            var $sectionSelected = $(this).text();
            var raw1 = $(this).closest('.panel').find('button').text();
            var text1 = raw1.substring(1);
            var array1 = text1.split(':');
            var courseCode = array1[0].trim();
            var title = text1.substring(courseCode.length +1).trim();
            var temp = JSON.parse(localStorage[courseCode]);
            var courseIndex = -1;
            for (var i = 0; i < temp.length; i++) {
                if (temp[i].title == title) {
                    courseIndex = i;
                }
            }
            // Remove calendar objects from calendar
            if (sourceClicked.length > 0) {
                $('#calendar').fullCalendar( 'removeEventSource', sourceClickedFall);
                $('#calendar2').fullCalendar( 'removeEventSource', sourceClickedWinter);

                for (var i = 0; i < sourceClicked.length; i++) {
                    if (sourceClicked[i].id === $courseCode) {
                        sourceClicked.splice(i, 1);
                        i--;
                    }
                }
                distributeByTerm(sourceClicked);
                sourceRemove = [];
            }



            var $this = $(this);
            // Hightlight the section
            if (!$this.hasClass('selected')) {
                // remove all other active buttons
                $this.closest('.panel-body').find(".section .content").each(function () {
                    $(this).removeClass('selected');
                });
                $this.addClass('selected');
                if (temp[courseIndex].selection.section == $sectionSelected) {
                    courseIndex = -1;
                }
                if (localStorage.getItem($courseCode) === null) {
                } else {
                    var data = JSON.parse(localStorage.getItem($courseCode));
                    data.forEach(function(course) {
                        if (course.title === title) {
                            var sections = course.data.sections;
                            var msg = "<div class='fMeeting'><span class='title'>CHOOSE ALL: </span>";
                            sections.forEach(function (section) {
                                if (section.sectionCode === $sectionSelected) {
                                    if (section.fixedMeetings.length > 0) {
                                        section.fixedMeetings.forEach(function(fMeeting) {
                                            msg += "<div  class='content'>" + fMeeting.type + "</div>";
                                        })
                                    }
                                    msg+="</div>";

                                    if (section.varyingMeetings.length > 0) {
                                        msg += "<div class='vMeeting'><span class='title'>CHOOSE ONE: </span>";
                                        section.varyingMeetings.forEach(function(vMeeting) {
                                            msg += "<div  class='content'>" + vMeeting.type + "</div>";
                                        });
                                    }
                                    msg+="</div>";
                                }
                            });
                            msg+= "<div class='catalog'><span class='title'>CATALOG#: </span><div  class='number'></div></div>";
                            $this.closest('.panel-body').find('.result').html(msg);
                        }
                    });
                }
                //Adds section to localStorage
                if (courseIndex != -1) {
                    //If selection is empty
                    if (Object.keys(JSON.parse(localStorage[courseCode])[courseIndex].selection).length == 0) {
                        var temp2 = {};
                        temp2.section = $sectionSelected;
                        temp2.fMeetings = [];
                        temp2.vMeetings = [];
                        temp[courseIndex].selection = temp2;
                        localStorage[courseCode] = JSON.stringify(temp);
                        //Selection already exists
                    } else {
                        temp[courseIndex].selection.section = $sectionSelected;
                        temp[courseIndex].selection.fMeetings = [];
                        temp[courseIndex].selection.vMeetings = [];
                        localStorage[courseCode] = JSON.stringify(temp);
                    }
                }




            } else {
                // Dehighlight the section
                $(this).removeClass('selected');
                $(this).parent().next().empty();

                //Removes section from localStorage
                if (courseIndex != -1) {
                    temp[courseIndex].selection = {};
                    localStorage[courseCode] = JSON.stringify(temp);
                }
            }
        });

//        Add hover event handler
//        $('body').on({
//            mouseenter: function(){
//                var $courseCode = $(this).closest('.panel').find('button').attr('value');
//                var $time = $(this).next().html().split('/'); //$time[0] = date, $time[1] = startTime, $time[2] = endTime, time[3] = location
//                source.push({
//                    id: $courseCode,
//                    title: $courseCode+'\n'+$time[3],
//                    start: $time[0] + 'T' + $time[1],
//                    end: $time[0] + 'T' + $time[2],
//                    color:'#4fd84a'
//                });
//
//                if (localStorage.getItem("data") === null) {
//                    $('#calendar').fullCalendar( 'addEventSource', source);
//                } else {
//                    var data = JSON.parse(localStorage.getItem("data"));
//                    data.forEach(function(val, i) {
//                        if (JSON.stringify(val) === JSON.stringify(source[source.length-1])) {
//
//                        } else {
//                            $('#calendar').fullCalendar( 'addEventSource', source);
//                        }
//                    });
//                }
//
//            },
//            mouseleave: function(){
//                $('#calendar').fullCalendar( 'removeEventSource', source);
//                source.pop();
//
//
//            }
//        }, '.section');

        // Add fixed meeting section on calendar
        $('body').on('click', '.fMeeting .content', function(e) {
            $('#calendar').fullCalendar( 'removeEventSource', sourceClickedFall);
            $('#calendar2').fullCalendar( 'removeEventSource', sourceClickedWinter);

            var $courseCode = $(this).closest('.panel').find('button').attr('value');
            var $sectionSelected = $(this).parent().parent().prev().find('.selected').text();
            var raw1 = $(this).closest('.panel').find('button').text();
            var $meetingSelected = $(this).text();
            var text1 = raw1.substring(1);
            var array1 = text1.split(':');
            var courseCode = array1[0].trim();
            var title = text1.substring(courseCode.length +1).trim();
            var temp = JSON.parse(localStorage[courseCode]);
            var courseIndex = -1;
            var reloading = false;
            for (var i = 0; i < temp.length; i++) {
                if (temp[i].title == title) {
                    courseIndex = i;
                }
            }

//            Check if meeting Selected is already in the array

//            console.log(temp);
//            console.log(courseIndex);
//            console.log(temp[courseIndex].selection.fMeetings.length);
            for (var ii = 0; ii < temp[courseIndex].selection.fMeetings.length; ii++ ) {
                if (temp[courseIndex].selection.fMeetings[ii] == $meetingSelected) {
                    reloading = true;
                }
            }

            var $this = $(this);
            // Hightlight the fixedMeeting
            if (!$this.hasClass('selected')) {
//                $this.closest('.panel-body').find(".fMeeting .content").each(function () {
//                    $(this).removeClass('selected');
//                });
                $this.addClass('selected');

                //Add fMeeting to LocalStorage
                if (courseIndex != -1 && !reloading) {
                    temp[courseIndex].selection.fMeetings.push($meetingSelected);
                    localStorage[courseCode] = JSON.stringify(temp);
                }

                if (localStorage.getItem($courseCode) === null) {
                } else {
                    var data = JSON.parse(localStorage.getItem($courseCode));
                    data.forEach(function (course) {
                        if (course.title === title) {
                            var sections = course.data.sections;
//                            var fMeetingSelection = course.selection.fMeetings;
//                            var vMeetingSelection = course.selection.vMeetings;
                            sections.forEach(function (section) {
                                if (section.sectionCode === $sectionSelected) {
                                    var fixedMeetings = section.fixedMeetings;
                                            fixedMeetings.forEach(function (fMeeting) {
                                        if (fMeeting.type === $meetingSelected) {
                                            var meetingTime = fMeeting.timings;
                                            var term = section.term;
                                            meetingTime.forEach(function (time) {
                                                sourceClicked.push({
                                                    id: $courseCode,
                                                    title: $courseCode + '\n' + fMeeting.type,
                                                    start: convertDayToDate(time.day) + 'T' + (time.startTime.length > 4 ? time.startTime : 0 + time.startTime),
                                                    end: convertDayToDate(time.day) + 'T' + (time.endTime.length > 4 ? time.endTime : 0 + time.endTime),
                                                    color: '#4fd84a',
                                                    term: term,
                                                    courseName: title
                                                });
                                            })
                                        };
                                    })
                                }
                            });
                        }
                    })
                    distributeByTerm(sourceClicked);
                }
            } else {
                // Dehighlight the fixedMeeting
                $(this).removeClass('selected');

                var $courseCode = $(this).closest('.panel').find('button').attr('value');
                var raw1 = $(this).closest('.panel').find('button').text();
                var text1 = raw1.substring(1);
                var title = text1.substring(courseCode.length +1).trim();
                var $sectionSelected = $(this).parent().parent().prev().find('.selected').text();
                var $meetingSelected = $(this).text();

                if (localStorage.getItem($courseCode) === null) {
                } else {
                    var data = JSON.parse(localStorage.getItem($courseCode));
                    data.forEach(function (course) {
                        if (course.title === title) {
                            var sections = course.data.sections;
                            sections.forEach(function (section) {
                                if (section.sectionCode === $sectionSelected) {
                                    var fixedMeetings = section.fixedMeetings;
                                    fixedMeetings.forEach(function (fMeeting) {
                                        if (fMeeting.type === $meetingSelected) {
                                            var meetingTime = fMeeting.timings;
                                            meetingTime.forEach(function (time) {
                                                sourceRemove.push({
                                                    id: $courseCode,
                                                    title: $courseCode + '\n' + fMeeting.type,
                                                    start: convertDayToDate(time.day) + 'T' + (time.startTime.length > 4 ? time.startTime : 0 + time.startTime),
                                                    end: convertDayToDate(time.day) + 'T' + (time.endTime.length > 4 ? time.endTime : 0 + time.endTime),
                                                    color: '#4fd84a',
                                                    courseName: title
                                                });
                                            })
                                        };
                                    })
                                }
                            });
                        }
                    })
                    sourceClicked.forEach(function(calendarObj, i) {
                        sourceRemove.forEach(function (removeObj){
                            if (calendarObj.id === removeObj.id &&
                                    calendarObj.courseName === removeObj.courseName &&
                                    calendarObj.title === removeObj.title) {
                                sourceClicked.splice(i, 1);
                            }
                        })
                    })
                    distributeByTerm(sourceClicked);
                    sourceRemove = [];
                }

                //Remove fMeeting from LocalStorage
                if (courseIndex != -1) {
                    //Find index of fMeeting to be removed
                    var fMeetingIndex = -1;

                    for (var i= 0; i < temp[courseIndex].selection.fMeetings.length ; i++) {
                        if (temp[courseIndex].selection.fMeetings[i] == $meetingSelected) {
                            fMeetingIndex = i;
                        }
                    }

                    if (fMeetingIndex != -1) {
                        temp[courseIndex].selection.fMeetings.splice(fMeetingIndex, 1);
                        localStorage[courseCode] = JSON.stringify(temp);
                    }

                }
            }
            var catalogNumbers = updateCatNums(courseCode, title);
            $(this).closest('.panel-body').find('.catalog .number').html(catalogNumbers);
        });

        function convertDayToDate(day) {
            var date = "2015-12-";
            switch (day) {
                case "Monday":
                    date += 21;
                    break;
                case "Tuesday":
                    date += 22;
                    break;
                case "Wednesday":
                    date += 23;
                    break;
                case "Thursday":
                    date += 24;
                    break;
                case "Friday":
                    date += 25;
                    break;
            }
            return date;
        }

        // Add variable meeting section on calendar
        $('body').on('click', '.vMeeting .content', function(e) {
            $('#calendar').fullCalendar( 'removeEventSource', sourceClickedFall);
            $('#calendar2').fullCalendar( 'removeEventSource', sourceClickedWinter);

            var $courseCode = $(this).closest('.panel').find('button').attr('value');
            var $sectionSelected = $(this).parent().parent().prev().find('.selected').text();
            var raw1 = $(this).closest('.panel').find('button').text();
            var $meetingSelected = $(this).text();
            var text1 = raw1.substring(1);
            var array1 = text1.split(':');
            var courseCode = array1[0].trim();
            var title = text1.substring(courseCode.length +1).trim();
            var temp = JSON.parse(localStorage[courseCode]);
            var courseIndex = -1;
            var reloading = false;
            for (var i = 0; i < temp.length; i++) {
                if (temp[i].title == title) {
                    courseIndex = i;
                }
            }

//            Check if meeting Selected is already in the array

//            console.log(temp);
//            console.log(courseIndex);
//            console.log(temp[courseIndex].selection.vMeetings.length);
            for (var ii = 0; ii < temp[courseIndex].selection.vMeetings.length; ii++ ) {
                if (temp[courseIndex].selection.vMeetings[ii] == $meetingSelected) {
                    reloading = true;
                }
            }


            var $this = $(this);
            // Hightlight the varyingMeeting
            if (!$this.hasClass('selected')) {
                // remove all other active buttons
//                $this.closest('.panel-body').find(".vMeeting .content").each(function () {
//                    $(this).removeClass('selected');
//                });
                $this.addClass('selected');


                if (courseIndex != -1 && !reloading) {
                    temp[courseIndex].selection.vMeetings.push($meetingSelected);
                    localStorage[courseCode] = JSON.stringify(temp);
                }

                if (localStorage.getItem($courseCode) === null) {
                } else {
                    var data = JSON.parse(localStorage.getItem($courseCode));
                    data.forEach(function (course) {
                        if (course.title === title) {
                            var sections = course.data.sections;
                            sections.forEach(function (section) {
                                if (section.sectionCode === $sectionSelected) {
                                    var varyingMeetings = section.varyingMeetings;
                                    varyingMeetings.forEach(function (vMeeting) {
                                        if (vMeeting.type === $meetingSelected) {
                                            var meetingTime = vMeeting.timings;
                                            var term = section.term;
                                            meetingTime.forEach(function (time) {
                                                sourceClicked.push({
                                                    id: $courseCode,
                                                    title: $courseCode + '\n' + vMeeting.type,
                                                    start: convertDayToDate(time.day) + 'T' + (time.startTime.length > 4 ? time.startTime : 0 + time.startTime),
                                                    end: convertDayToDate(time.day) + 'T' + (time.endTime.length > 4 ? time.endTime : 0 + time.endTime),
                                                    color: '#4fd84a',
                                                    term: term,
                                                    courseName: title
                                                });
                                            })
                                        }
                                    })
                                }
                            });
                        }
                    })
                    distributeByTerm(sourceClicked);
                }
            } else {
                // Dehighlight the varingMeeting
                $(this).removeClass('selected');
                var $courseCode = $(this).closest('.panel').find('button').attr('value');
                var raw1 = $(this).closest('.panel').find('button').text();
                var text1 = raw1.substring(1);
                var title = text1.substring(courseCode.length +1).trim();
                var $sectionSelected = $(this).parent().parent().prev().find('.selected').text();
                var $meetingSelected = $(this).text();

                if (localStorage.getItem($courseCode) === null) {
                } else {
                    var data = JSON.parse(localStorage.getItem($courseCode));
                    data.forEach(function (course) {
                        if (course.title === title) {
                            var sections = course.data.sections;
                            sections.forEach(function (section) {
                                if (section.sectionCode === $sectionSelected) {
                                    var varyingMeetings = section.varyingMeetings;
                                    varyingMeetings.forEach(function (vMeeting) {
                                        if (vMeeting.type === $meetingSelected) {
                                            var meetingTime = vMeeting.timings;
                                            meetingTime.forEach(function (time) {
                                                sourceRemove.push({
                                                    id: $courseCode,
                                                    title: $courseCode + '\n' + vMeeting.type,
                                                    start: convertDayToDate(time.day) + 'T' + (time.startTime.length > 4 ? time.startTime : 0 + time.startTime),
                                                    end: convertDayToDate(time.day) + 'T' + (time.endTime.length > 4 ? time.endTime : 0 + time.endTime),
                                                    color: '#4fd84a',
                                                    courseName: title
                                                });
                                            });
                                        };
                                    })
                                }
                            });
                        }
                    })
                    sourceClicked.forEach(function (calendarObj, i) {
                        sourceRemove.forEach(function (removeObj) {
                            if (calendarObj.id === removeObj.id &&
                                    calendarObj.courseName === removeObj.courseName &&
                                    calendarObj.title === removeObj.title) {
                                sourceClicked.splice(i, 1);
                            }
                        })
                    })
                    distributeByTerm(sourceClicked);
                    sourceRemove = [];
                }

                //Remove vMeeting from LocalStorage
                if (courseIndex != -1) {
                    //Find index of vMeeting to be removed
                    var vMeetingIndex = -1;

                    for (var i= 0; i < temp[courseIndex].selection.vMeetings.length ; i++) {
                        if (temp[courseIndex].selection.vMeetings[i] == $meetingSelected) {
                            vMeetingIndex = i;
                        }
                    }

                    if (vMeetingIndex != -1) {
                        temp[courseIndex].selection.vMeetings.splice(vMeetingIndex, 1);
                        localStorage[courseCode] = JSON.stringify(temp);
                    }

                }
            }
            var catalogNumbers = updateCatNums(courseCode, title);
            $(this).closest('.panel-body').find('.catalog .number').html(catalogNumbers);
        });

        // Load all the courses on refresh
        localStorage['appVersion'] = "1.0";
        var loadMsg = "";

        if (localStorage['allCourses'] != null) {
            for (var i in JSON.parse(localStorage['allCourses'])) {
                var course = JSON.parse(localStorage[JSON.parse(localStorage['allCourses'])[i]]);
                course.forEach(function (data) {
                    var courseCode = JSON.parse(localStorage['allCourses'])[i];
                    var courseName = data.title;
                    var courseData = data.data;
                    var sections = courseData.sections;

                    loadMsg = displayCourses(courseCode, courseName, courseData, sections, 'onRefresh');
                    $('#courses').prepend(loadMsg);

                    // Generate click events for sections, fmeeting and vmeeting

                    // section
                    var selectedSection = data.selection.section;
                    $('#collapse' +  courseCount + ' .section .content').each(function ()  {
                        if ($(this).text() == selectedSection) {
                            $(this).trigger("click");
                        }
                    })

                    // fmeeting
                    var myFMeetings = data.selection.fMeetings;

                    $('#collapse' + courseCount + ' .result .fMeeting .content').each(function() {
                        for (var k = 0; k < myFMeetings.length; k++) {
                            if ($(this).text() == myFMeetings[k]){
                                $(this).trigger("click");
                            }
                        }
                    })

                    var myVMeetings = data.selection.vMeetings;
                    $('#collapse' + courseCount + ' .result .vMeeting .content').each(function() {
                        for (var h = 0; h < myVMeetings.length; h++) {
                            if ($(this).text() == myVMeetings[h]){
                                $(this).trigger("click");
                            }
                        }
                    })

                    courseCount++;
                });
            }
        }
//        $(".content:contains('A')").trigger('click');

        $('body').on('click', '.list-group-item', function(e) {
            e.preventDefault();
            var $this = $(this);
            if (!$this.hasClass('active')) {
                // remove all other active buttons
                $(".list-group-item").each(function () {$(this).removeClass('active')});
                $this.addClass('active');
            }
        });

        // Delete a selected course from the sidebar
        $('body').on('click', '#close', function(){

            var raw1 = $(this).parent().text();
            var text1 = raw1.substring(1);
            var array1 = text1.split(':');
            var courseCode = array1[0].trim();
            var title = text1.substring(courseCode.length +1).trim();
            var temp = JSON.parse(localStorage[courseCode]);
            var toDel = -1;
            for (var i = 0; i < temp.length; i++) {
                if (temp[i].title == title) {
                    toDel = i;
                }
            }

            var $courseCode = $(this).closest('.panel').find('button').attr('value');
            // Remove calendar objects from calendar
            if (sourceClicked.length > 0) {
                $('#calendar').fullCalendar( 'removeEventSource', sourceClickedFall);
                $('#calendar2').fullCalendar( 'removeEventSource', sourceClickedWinter);
                for (var i = 0; i < sourceClicked.length; i++) {
                    if (sourceClicked[i].id === $courseCode) {
                        sourceClicked.splice(i, 1);
                        i--;
                    }
                }
                distributeByTerm(sourceClicked);
                sourceRemove = [];
            }
            
            if (toDel != -1) {
                temp.splice(toDel, 1);
            }

            localStorage[courseCode] = JSON.stringify(temp);

            //Remove empty array
            if (JSON.parse(localStorage[courseCode]).length == 0) {
                localStorage.removeItem(courseCode);
                var allCourses = JSON.parse(localStorage['allCourses']);
                var courseIndex = -1;
                for (var i = 0; i < allCourses.length; i++) {
                    if (allCourses[i] == courseCode) {
                        courseIndex = i;
                    }
                }
                allCourses.splice(courseIndex, 1);
                localStorage['allCourses'] = JSON.stringify(allCourses);
                if (localStorage['allCourses'] == '[]') {
                    localStorage.removeItem('allCourses');
                }

            }
            $(this).closest('.panel').remove();
        })

        function distributeByTerm(array) {
            sourceClickedFall = [];
            sourceClickedWinter = [];
            array.forEach(function(calendarObj) {
                if (calendarObj.term === 'F') {
                    sourceClickedFall.push(calendarObj);
                } else if (calendarObj.term === 'W') {
                    sourceClickedWinter.push(calendarObj);
                } else if (calendarObj.term === 'Y') {
                    sourceClickedFall.push(calendarObj);
                    sourceClickedWinter.push(calendarObj);
                }
            });
            $('#calendar').fullCalendar( 'addEventSource', sourceClickedFall);
            $('#calendar2').fullCalendar( 'addEventSource', sourceClickedWinter);
        }

        // Return a string of catalog numbers given user input
        function updateCatNums(courseCode, title) {


            var data, selection, i, j, k, coursesFromCourseCode, courseInLS, targetedSection;
            var selectedSectionCode, h, res, x, y, z;


            // One courseCode could map to two courses (e.g. English and French)
            coursesFromCourseCode = JSON.parse(localStorage[courseCode]);

            //Find the course in the array
            for (i = 0; i < coursesFromCourseCode.length; i++) {
                if (coursesFromCourseCode[i].title == title) {
                    courseInLS = coursesFromCourseCode[i];
                }
            }
            //end find the course in the array

            //localStorage's data and selection
            data = courseInLS.data;
            selection = courseInLS.selection;

            //Find the section in data's sections
            selectedSectionCode = selection.section; //e.g "A"
            for (h = 0; h < data.sections.length; h++) {
                if (data.sections[h].sectionCode == selectedSectionCode) {
                    targetedSection = data.sections[h];
                }
            }
            // end find the section in data's sections

            // Loop thru each selected fixed meeting in selection
            res = "";
            for (k = 0; k < selection.fMeetings.length; k++) {
                // In targeted section, go into its fixed meetings
                // find the cat code by match the fixed meeting's type against selection's fixed meeting's type
                for (j = 0; j < targetedSection.fixedMeetings.length; j++) {
                    if (targetedSection.fixedMeetings[j].catalogCode && targetedSection.fixedMeetings[j].type == selection.fMeetings[k]) {
                        res += targetedSection.fixedMeetings[j].catalogCode + "(" + targetedSection.fixedMeetings[j].type + ")\n";
                    }
                }
            }

            // Find cat codes from vMeetings
            // loop fixed meetings, in order narrow down to which set of varying meetings
            for (k = 0; k < selection.vMeetings.length; k++) {
                // In targeted section, go into its varying meetings
                // find the cat code by match the varying meeting's type against selection's varying meeting's type
                for (j = 0; j < targetedSection.varyingMeetings.length; j++) {
                    if (targetedSection.varyingMeetings[j].catalogCode && targetedSection.varyingMeetings[j].type == selection.vMeetings[k]) {
                        res += targetedSection.varyingMeetings[j].catalogCode + "(" + targetedSection.varyingMeetings[j].type + ")\n";

                    }
                }


            }
            return res;
        }

        function displayCourses(courseCode, courseName, data, sections, type) {
            var msg = '<div class="panel panel-default">'+
                    '<button data-toggle="collapse" data-target="#collapse' + courseCount + '" class="list-group-item" value=' + courseCode + '><span id="close">x</span>' + courseCode + ': ' + courseName + '</button>';
            if (type === 'onRefresh') {
                msg += '<div id="collapse' + courseCount + '" class="panel-collapse collapse"><div class="panel-body">';
            } else if (type === 'onSearch') {
                msg += '<div id="collapse' + courseCount + '" class="panel-collapse collapse in"><div class="panel-body">';
            }

            msg += "<span class='title'> DESC: </span>" + "<span class='desc'>" + data.note +  "<br></span>";
            if (data.prereqs[0].length > 0) {
                msg += "<span class='title'> PRE: </span>" + data.prereqs[0] + "<br>";
            }
            if (data.exclusions[0].length > 0) {
                msg += "<span class='title'> EXC: </span>" + data.exclusions[0] + "<br>";
            }
            msg += "<div class='section'><span class='title'>SECTION: </span>";
            sections.forEach(function (section) {
                var term = section.term;
                if (term === 'F') {
                    msg += "<div  class='content pink'>" + section.sectionCode + "</div>";
                } else if (term === 'W') {
                    msg += "<div  class='content blue'>" + section.sectionCode + "</div>";
                } else if (term === 'Y') {
                    msg += "<div  class='content orange'>" + section.sectionCode + "</div>";
                }
            });

            msg += '</div>'
            msg += '<div class="result"></div></div></div>';
            return msg;
        }

    });
</script>
</body>
